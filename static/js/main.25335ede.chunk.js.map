{"version":3,"sources":["components/chatbot/images/ChatFace.js","components/chatbot/Message.js","components/chatbot/QuickReply.js","components/chatbot/QuickRepliesContainer.js","components/chatbot/images/BannerFace.js","components/chatbot/Chatbot.js","components/Signature/Signature.js","App.js","serviceWorker.js","index.js"],"names":["ChatFace","id","src","alt","triggers","Message","props","state","emotion","this","className","speaker","key","text","Component","QuickReply","style","margin","href","onClick","event","click","reply","QuickRepliesContainer","handleClick","bind","replyClick","i","quickReplies","map","renderQuickReply","renderQuickReplies","BannerFace","cookies","Cookies","Chatbot","messageLength","handleInput","handleQuickReplyPayload","messages","emotionCount","shopWelcomeSent","showBot","success","undefined","get","set","uuid","path","setState","says","msg","axios","post","userID","res","data","queryResult","intent","displayName","replace","emotionValue","parseInt","emotionHandler","fulfillmentMessages","includes","aSuccess","unSuccess","resolveAfterXSeconds","length","speaks","x","Promise","resolve","setTimeout","df_event_query","messagesEnd","scrollIntoView","behavior","talkInput","inputElement","focus","document","body","backgroundImage","e","df_text_query","target","value","preventDefault","stopPropagation","message","stateMessages","renderOneMessage","renderMessages","ref","el","type","onKeyPress","placeholder","autoFocus","withRouter","Signature","display","justifyContent","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.25335ede.chunk.js","sourcesContent":["const ChatFace = [\n    { id: 0, src: './Assets/crybot-msg.svg', alt: \"Crying robot\", triggers: ['sorry', 'anxious', 'depressed']},\n    { id: 1, src: \"./Assets/deadbot-msg.svg\", alt: \"Dead robot\" },\n    { id: 2, src: \"./Assets/despairbot-msg.svg\", alt: \"Wailing robot\", triggers: ['so sorry!'] },\n    { id: 3, src: \"./Assets/grinbot-msg.svg\", alt: \"Smiling robot\" },\n    { id: 4, src: \"./Assets/groanbot-msg.svg\", alt: \"Groaning robot\", triggers: ['oh wow'] },\n    { id: 5, src: \"./Assets/luvbot-msg.svg\", alt: \"Lovestruck robot\", triggers: ['proud', 'great', 'nice']  },\n    { id: 6, src: \"./Assets/sadbot-msg.svg\", alt: \"Frowning robot\",  triggers: ['mm', 'i see']},\n]\n\nexport default ChatFace;\n","import {Component} from 'react';\nimport React from 'react';\nimport ChatFace from './images/ChatFace.js'\n\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            props\n        }\n    }\n\n\n    render() {\n\n        let emotion = this.props.emotion; \n\n        return (\n            <div className = \"chat\">\n                {this.props.speaker === 'bot' && \n                <div className = \"row message-row\">\n                <img\n                    key={ChatFace[emotion].id} \n                    src={ChatFace[emotion].src} \n                    alt={ChatFace[emotion].alt}  \n                    ></img>\n                <div className = \"col bot-message-col\">\n                    <span className = \"bot-text\">\n                        {this.props.text}\n                    </span>\n                </div>\n                </div>\n                }\n                {this.props.speaker === 'me' && \n                <div className = \"row justify-content-end align-items-end message-row\">\n                <div className = \"col human-message-col\">\n                    <span className = \"human-text\">\n                        {this.props.text}\n                    </span>\n                </div>\n                </div>\n                }\n        </div>\n            )\n        }\n    }\n\n\nexport default Message;","import React from 'react';\n\n\nconst QuickReply = (props) => {\n\n        return (\n            <div className = \"reply-col\">\n                <a style={{ margin: 3}} href=\"/\" \n                className=\"btn btn-primary\"\n                id = \"choice-btn\"\n                onClick={(event) =>\n                    props.click(\n                        event,\n                        props.reply\n                    )\n                }>\n                    {props.reply}\n                </a>\n            </div>\n        );\n    };\n\nexport default QuickReply;\n\n   \n\n","import React, { Component } from 'react';\nimport QuickReply from './QuickReply';\n\nclass QuickRepliesContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(event, text) {\n        this.props.replyClick(event, text)\n    }\n\n    renderQuickReply(reply, i){\n        return <QuickReply key = {i} click = {this.handleClick} reply = {reply} />;\n    }\n\n    renderQuickReplies(quickReplies){\n        if (quickReplies) {\n            return quickReplies.map((reply,i) => {\n                return this.renderQuickReply(reply, i)\n            })\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"quick-replies\" className=\"row justify-content-end\">\n                {this.renderQuickReplies(this.props.text)}\n            </div>\n        )\n    }\n}\n\nexport default QuickRepliesContainer","const BannerFace = [\n    { id: 0, src: './Assets/crybot-status.svg', alt: \"Crying robot\", triggers: ['sorry', 'anxious', 'depressed']},\n    { id: 1, src: \"./Assets/deadbot-status.svg\", alt: \"Dead robot\" },\n    { id: 2, src: \"./Assets/despairbot-status.svg\", alt: \"Wailing robot\", triggers: ['so sorry!'] },\n    { id: 3, src: \"./Assets/grinbot-status.svg\", alt: \"Smiling robot\" },\n    { id: 4, src: \"./Assets/groanbot-status.svg\", alt: \"Groaning robot\" },\n    { id: 5, src: \"./Assets/luvbot-status.svg\", alt: \"Lovestruck robot\", triggers: ['proud', 'great', 'nice']  },\n    { id: 6, src: \"./Assets/sadbot-status.svg\", alt: \"Frowning robot\",  triggers: ['mm', 'i see']},\n]\n\n\nexport default BannerFace;\n","import React, { Component } from 'react';\nimport axios from 'axios/index';\nimport Message from './Message';\nimport Cookies from 'universal-cookie';\nimport { withRouter } from 'react-router-dom'\nimport {v4 as uuid} from 'uuid';\nimport QuickRepliesContainer from './QuickRepliesContainer';\nimport BannerFace from './images/BannerFace';\nimport ChatFace from './images/ChatFace'\n\nconst cookies = new Cookies();\n\n\nclass Chatbot extends Component {\n    \n    messagesEnd;\n    inputElement;\n    // using state to capture / store messages\n    constructor(props) {\n        super(props);\n        this.messageLength = 1;\n        this.handleInput = this.handleInput.bind(this); // makes 'this' work in callback\n        this.handleQuickReplyPayload = this.handleQuickReplyPayload.bind(this);\n        this.state = {\n            messages: [],\n            emotionCount: 0,\n            quickReplies: [],\n            shopWelcomeSent: false,\n            showBot: true,\n            emotion: 3,\n            success: false\n        }\n\n        if (cookies.get('userID') === undefined){\n            cookies.set('userID', uuid(), {path: '/'}); //sets user cookie session to randomly generated number\n        }    \n    }\n    \n\n    // defining api calls (note: must be asynchronous)\n    async df_text_query(text) {\n        this.setState({quickReplies: []})\n        let says = {\n            speaker: 'me',\n            msg: {\n                text: {\n                    text : text\n                }\n            }\n        };\n        // resets messageLength, to make delay more reasonable\n        this.setState({messageLength: 1})\n        this.setState({messages: [...this.state.messages, says]})\n        try {\n            const res = await axios.post('https://bingebot.herokuapp.com/api/df_text_query', \n            {text, userID: cookies.get('userID')})\n\n            let emotionValue; \n            \n            if (res.data[0].queryResult.intent.displayName.replace( /[^\\d.]/g, '' ) !== ''){\n            emotionValue = parseInt(res.data[0].queryResult.intent.displayName.replace( /[^\\d.]/g, '' ));\n            this.emotionHandler(emotionValue);\n            }\n\n            else this.emotionHandler(3);\n            \n            for (let msg of res.data[0].queryResult.fulfillmentMessages) {\n                if (msg.text){\n                says = {\n                    speaker: 'bot',\n                    msg: msg\n                }\n                if (msg.text.text[0].includes('significant') || msg.text.text[0].includes('Victory!')){\n                    this.aSuccess();\n                }\n\n                if (msg.text.text[0].includes('technique') || msg.text.text[0].includes('activity')){\n                    this.unSuccess();\n                }\n\n                if (msg.text.text[0].includes('Ah, I see.')) {\n                    this.emotionHandler(0);\n                }\n\n                if (msg.text.text[0].includes('significant') || msg.text.text[0].includes('Victory!')){\n                    this.aSuccess();\n                }\n\n                // delay in next message is proportional to the current message's length\n                await this.resolveAfterXSeconds(this.state.messageLength);\n                this.setState({messageLength: msg.text.text[0].length})\n                this.setState({messages: [...this.state.messages, says]})\n                }\n\n                else if (msg.quickReplies){\n                    this.setState({quickReplies: msg.quickReplies.quickReplies})\n                }\n            }\n\n    } catch (e) {\n        says = {\n            speaks: 'bot',\n            msg: {\n                text : {\n                    text: \"Sorry, something went wrong. Try refreshing me.\"\n                }\n            }\n        }\n    }\n}\n\n\n            \n\n    async df_event_query(event) {\n\n        //this.setState({messages: [...this.state.messages, says]})\n        const res = await axios.post('https://bingebot.herokuapp.com/api/df_event_query', \n            {event, userID: cookies.get('userID')});\n        \n        for (let msg of res.data[0].queryResult.fulfillmentMessages) {\n            let says = {\n                speaker: 'bot',\n                msg: msg\n            }\n\n            if (msg.quickReplies){\n                this.setState({quickReplies: msg.quickReplies.quickReplies})\n            }\n\n            if (msg.text){\n            await this.resolveAfterXSeconds(this.state.messageLength);\n            this.setState({messageLength: msg.text.text[0].length})\n            this.setState({messages: [...this.state.messages, says]})\n            }\n        }\n    }\n\n    emotionHandler(x){\n        this.setState({emotion: x})\n        this.setState({emotionCount: this.state.messages.length + 3});\n    }\n\n\n    resolveAfterXSeconds(x){\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve(x)\n            }, x*40)\n        })\n    }\n\n    async componentDidMount() {\n        this.resolveAfterXSeconds(5);\n        this.df_event_query('welcome');\n        \n    }\n\n    componentDidUpdate() {\n        this.messagesEnd.scrollIntoView({behavior: \"smooth\"});\n        if (this.talkInput){\n        this.inputElement.focus();\n        }\n\n        if (this.state.messages.length === this.state.emotionCount){\n            this.emotionHandler(3);\n        } \n    }\n\n    aSuccess() { \n        this.setState({emotion: 5})\n        this.setState({success: true})\n        document.body.style.backgroundImage = \"url(./Assets/confetti.gif)\"\n    }\n\n    unSuccess() {\n        document.body.style.backgroundImage = \"\"\n    }\n\n    handleInput(e) {\n        if (e.key === 'Enter') {\n            this.df_text_query(e.target.value);\n            e.target.value = '';\n        }\n    }\n\n    handleQuickReplyPayload(event, text){\n        // stops app from following a href link\n        event.preventDefault();\n        event.stopPropagation();\n        this.df_text_query(text);\n    }\n\n    renderOneMessage(message, i) { \n        if (message.msg && message.msg.text && message.msg.text.text){\n        return <Message \n            speaker = {message.speaker} \n            text = {message.msg.text.text}\n            key = {i}\n            emotion = {this.state.emotion} /> \n        }\n    }\n\n    renderQuickReplies(quickReplies, i) {\n        return <QuickRepliesContainer\n                key = {i}\n                speaker = {'bot'}\n                text = {this.state.quickReplies ? this.state.quickReplies : null}\n                replyClick = {this.handleQuickReplyPayload}\n            /> \n    }\n            \n    renderMessages(stateMessages) {\n        if (stateMessages){\n            return stateMessages.map((message,i) => {  \n                return this.renderOneMessage(message, i)\n        })             \n    }\n        else {\n            return null;\n        }\n    \n    }\n\n     \n\n    render(){\n\n    let emotion = this.state.emotion;\n    \n    if (this.state.showBot){\n    return (\n        <div>\n        <div className = \"container-fluid site-container\">\n                <div className = \"row justify-content-center align-content-center header-row\">\n\n                        <h3> Fuck, I'm Hungry.</h3>\n                </div>\n                <div className = \"container chatbot-container\">\n                    <div className = \"row bot-hed-row align-items-center\">\n                        <div className = \"col-6\">\n                            <div className = \"row align-items-center\">\n                            <img\n                            key={BannerFace[emotion].id} \n                            src={BannerFace[emotion].src} \n                            alt={BannerFace[emotion].alt}  \n                            ></img>\n                                <div className = \"col\">\n                                    <h5 className = \"bot-name\">Bingebot</h5> \n                                    <p className = \"bot-status\"><i>Online</i></p>\n                                </div>\n                            </div>\n                        </div>\n                        <span className=\"dot\"></span>\n                    </div>\n                <div className = \"scale-in-center row chatbot-row\">   \n                    <div className = \"col-8 chatbot-col\">\n                        <div id=\"chatbot\">\n                            {this.renderMessages(this.state.messages)}\n                            {this.renderQuickReplies(this.state.quickReplies)}\n                            <div ref = {(el) => {this.messagesEnd = el;}}>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className = \"input-row\">\n                <input\n                    type = \"text\" onKeyPress = {this.handleInput}\n                    placeholder = \"Type a message\" \n                    ref = {(el) => {this.inputElement = el;}} autoFocus={true}/>\n                </div>\n                </div>\n        </div>\n        <div>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[0].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[1].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[2].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[3].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[4].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[5].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {BannerFace[6].src}></img>\n\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[0].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[1].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[2].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[3].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[4].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[5].src}></img>\n            <img alt = \"\" className = \"load-images\" src = {ChatFace[6].src}></img>\n        </div>\n    </div>\n        \n    )}\n    }\n}\n\nexport default withRouter(Chatbot);","import React from 'react';\n\n\n\nclass Signature extends React.Component {\n    render() {\n\n        return (\n            <div style = {{display: 'flex', justifyContent: 'flex-end'}}>\n                <p \n                className = ''>A nonsense project by <a \n                className = \"mainlink\" \n                href =\"https://mattseidholz.com\" >Matt Seidholz</a>\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default Signature\n","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport Chatbot from './components/chatbot/Chatbot'\nimport './App.css'\nimport Signature from './components/Signature/Signature'\n\nconst App = () => (\n    <div>\n        <div>\n            <BrowserRouter>\n                    <Chatbot />\n                    \n            </BrowserRouter>\n        </div>\n        <div style = {{display: 'flex', justifyContent: 'flex-end'}} className = \"row signature-row\">\n        <Signature />\n        </div>\n    </div>\n    )\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}